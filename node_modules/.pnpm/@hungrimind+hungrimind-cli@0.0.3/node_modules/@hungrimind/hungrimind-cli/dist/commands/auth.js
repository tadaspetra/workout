import { Command } from '@oclif/core';
import * as os from 'os';
import * as path from 'path';
import * as fs from 'fs/promises';
import open from 'open';
import { GITHUB_CLIENT_ID } from '../config.js';
export default class Auth extends Command {
    static description = 'Authenticate with GitHub';
    async saveToken(token) {
        const configDir = path.join(os.homedir(), '.hungrimind');
        await fs.mkdir(configDir, { recursive: true });
        await fs.writeFile(path.join(configDir, 'auth.json'), JSON.stringify({ token }));
    }
    async sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    async run() {
        try {
            // Step 1: Request device and user codes
            const deviceCodeResponse = await fetch('https://github.com/login/device/code', {
                method: 'POST',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    client_id: GITHUB_CLIENT_ID,
                    scope: 'user',
                }),
            });
            if (!deviceCodeResponse.ok) {
                throw new Error('Failed to get device code');
            }
            const { device_code, user_code, verification_uri, interval, } = await deviceCodeResponse.json();
            // Step 2: Show instructions to user
            this.log('\nTo authenticate, please follow these steps:');
            this.log(`1. Copy this code: ${user_code}`);
            this.log(`2. Visit: ${verification_uri}`);
            this.log('3. Paste the code when prompted\n');
            // Automatically open the verification URL
            await open(verification_uri);
            // Step 3: Poll for completion
            while (true) {
                const tokenResponse = await fetch('https://github.com/login/oauth/access_token', {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        client_id: GITHUB_CLIENT_ID,
                        device_code,
                        grant_type: 'urn:ietf:params:oauth:grant-type:device_code',
                    }),
                });
                if (!tokenResponse.ok) {
                    throw new Error('Failed to check authorization status');
                }
                const data = await tokenResponse.json();
                if (data.error === 'authorization_pending') {
                    await this.sleep(interval * 1000);
                    continue;
                }
                if (data.error) {
                    throw new Error(`Authorization failed: ${data.error}`);
                }
                if (data.access_token) {
                    await this.saveToken(data.access_token);
                    this.log('\nSuccessfully authenticated with GitHub!');
                    break;
                }
            }
        }
        catch (error) {
            this.error('Authentication failed: ' + error.message);
        }
    }
}
