import * as fs from 'fs/promises';
import * as fsCallback from 'fs';
import * as path from 'path';
import * as os from 'os';
import { Extract } from 'unzipper';
export async function extractAndRenameProject(zipBuffer, projectName, targetPath) {
    const tempFile = path.join(os.tmpdir(), `flutter-boilerplate-${Date.now()}.zip`);
    const tempDir = path.join(os.tmpdir(), `flutter-temp-${Date.now()}`);
    try {
        // Save zip to temp file
        await fs.writeFile(tempFile, Buffer.from(zipBuffer));
        // Extract to temp directory
        await fs.mkdir(tempDir, { recursive: true });
        await new Promise((resolve, reject) => {
            fsCallback.createReadStream(tempFile)
                .pipe(Extract({ path: tempDir }))
                .on('close', resolve)
                .on('error', reject);
        });
        // Get extracted folder and move to target
        const [extractedFolder] = await fs.readdir(tempDir);
        const extractedPath = path.join(tempDir, extractedFolder);
        await fs.mkdir(targetPath, { recursive: true });
        await fs.rename(extractedPath, targetPath);
        // Update project files
        await updateProjectFiles(targetPath, projectName);
    }
    finally {
        // Cleanup
        await fs.unlink(tempFile).catch(() => { });
        await fs.rm(tempDir, { recursive: true, force: true }).catch(() => { });
    }
}
async function updateProjectFiles(projectPath, newName) {
    const camelCaseName = newName.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
    const processFile = async (filePath) => {
        try {
            const content = await fs.readFile(filePath, 'utf8');
            const updated = content
                .replace(/test/g, newName)
                .replace(/test/g, camelCaseName);
            if (content !== updated) {
                await fs.writeFile(filePath, updated, 'utf8');
            }
        }
        catch {
            // Skip binary files or files that can't be read as text
        }
    };
    const processDirectory = async (dir) => {
        const entries = await fs.readdir(dir, { withFileTypes: true });
        for (const entry of entries) {
            const fullPath = path.join(dir, entry.name);
            if (entry.isDirectory()) {
                await processDirectory(fullPath);
            }
            else if (!entry.name.match(/\.(png|jpg|jpeg|gif|ttf|otf|woff|woff2|mp3|mp4|zip|jar)$/i)) {
                await processFile(fullPath);
            }
        }
    };
    await processDirectory(projectPath);
}
